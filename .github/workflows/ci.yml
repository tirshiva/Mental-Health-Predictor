name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 pytest pytest-cov
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/ app/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 src/ app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  data-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate data
      run: |
        python -c "
        import pandas as pd
        import sys
        
        # Check if data file exists
        try:
            df = pd.read_csv('data/raw_data/survey.csv')
            print(f'Data validation passed: {len(df)} rows, {len(df.columns)} columns')
        except Exception as e:
            print(f'Data validation failed: {e}')
            sys.exit(1)
        "

  model-training:
    runs-on: ubuntu-latest
    needs: [test, data-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run data preprocessing
      run: |
        python src/preprocessing/data_cleaner.py
    
    - name: Run EDA
      run: |
        python src/preprocessing/eda.py
    
    - name: Train models
      run: |
        python src/training/model_trainer.py
    
    - name: Generate SHAP explanations
      run: |
        python src/utils/model_explainer.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: |
          models/
          outputs/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ app/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        # Generate basic documentation
        echo "# Mental Health Risk Prediction Project" > docs/README.md
        echo "## Overview" >> docs/README.md
        echo "This project predicts mental health risk for remote workers using machine learning." >> docs/README.md
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/
        retention-days: 30 